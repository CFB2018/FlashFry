package scoring

import bitcoding.{BitEncoding, StringCount}
import crispr.{CRISPRHit, CRISPRSiteOT}
import org.scalatest.{FlatSpec, Matchers}
import reference.CRISPRSite
import standards.Cas9ParameterPack

import scala.collection.mutable

/**
  * test the Doench 2016 off-target score against test examples run with the python code
  */
class Doench2016CFDScoreTest extends FlatSpec with Matchers {

  val bitEncoder = new BitEncoding(Cas9ParameterPack)
  val dScore = new Doench2016CFDScore()
  dScore.bitEncoder(bitEncoder)

  "Doench2016CFDScore" should "correctly tally a simple guide" in {
    val offTargetList = Array[String]("AGCGCGGCCCCAGTGCCCCGTGG")

    val otListLong = offTargetList.map{ot => bitEncoder.bitEncodeString(ot)}

    val crispr = CRISPRSite("test", "CGCGCGGCCCCAGTTCTGCGCAG", true, 0, None)
    val otHit = new CRISPRSiteOT(crispr, bitEncoder.bitEncodeString(StringCount("CGCGCGGCCCCAGTTCTGCGCAG", 1)),1000)
    otListLong.foreach{ot => otHit.addOT(new CRISPRHit(ot,Array[Long](0l)))}

    (dScore.scoreGuide(otHit).toDouble) should be(0.0 +- 0.001) //0.016806722683753505, but reduced to zero by CRISPOR rules
  }


  "Doench2016CFDScore" should "correctly a simple guide right according to the python code" in {
    val offTargetList = Array[String]("AAAAAGGTTGGGGATATTGCTGG","AAAACTGCTTGGGATATAGCAGG","AAAAGGATTTGGGATATGGGTGG","AAAAGGGCTTGGAGTATAGCTGG",
      "AAAAGGGTATGGGATAAAACAGG","AAAAGGGTCTGGCATACAGCAGG","AAAAGGGTTGGGGATAGTGCTGG","AAAAGGGTTTGGGAAGTAACAGG","AAAAGGTCTTGGGATATAGGAGG","AAAAGGTTTTGGAATATAGATGG",
      "AAAAGTGATTGGGATATAGTAGG","AAAAGTGTTTGGGATATGGAAGG", "AACAAGGTTTGTGATATAGCAGG","AATAGGGTCGGGGATATAGCAGG","AGAAAGGTTTGGGATATTGCTGG","AGAAGGCTTTGGGATATGGCTGG",
      "CAAAGGGATTGGGACATAGCTGG","CAAAGGGTTTGGCATATAGATGG","GAAAGGGTTTGGGATATCTCTGG")

    val otListLong = offTargetList.map{ot => bitEncoder.bitEncodeString(ot)}

    val crispr = CRISPRSite("test", "AAAAGGGTTTGGGATATAGCTGG", true, 0, None)
    val otHit = new CRISPRSiteOT(crispr, bitEncoder.bitEncodeString(StringCount("AAAAGGGTTTGGGATATAGCTGG", 1)),1000)
    otListLong.foreach{ot => otHit.addOT(new CRISPRHit(ot,Array[Long](0l)))}

    (dScore.scoreGuide(otHit).toDouble) should be(0.5238095242619047 +- 0.001)
  }

  "Doench2016CFDScore" should "correctly a second guide correctly according to the python code" in {

    val offTargetList2 = Array[String]("AGCGCGGCCCCAGTGCCCCGTGG","AGGGCGGCCCCAGGTCTGCGCGG","AGGGCGGCTCCAGTTCTGTGGAG",
    "AGTGAGGCCCCAGTGCTGCGGGG","CACTCGGCCTCAGTTCTGGGAAG","CCCCCGGCCCCAGTTCCGCACAG",
    "CCCGAGACCCCAGTTCTGCCCAG","CCCGCAGCCCCCGTTCTGCACAG","CCCGCGGCCCCAGGTGGGCGGAG","CCCGCGGCCCCCGATCCGCGTGG",
    "CCCGCGGCCCCTGTCCTGCTCAG","CCCGCTGCCCCAGTTCTTCTCAG","CCCGCTGCCCCCGCTCTGCGTAG","CCCTCGTCCTCAGTTCTGCGGAG","CGAGCGACCCCAGTTGTGAGAAG",
    "CGAGCGACCCCCGTTCTGGGAGG","CGAGTGGCCCCTGGTCTGCGTGG","CGCACAGCCCCAGGACTGCGAGG","CGCACAGCCCCAGTTCCCCGCGG","CGCACGGGCCTGGTTCTGCGAGG",
    "CGCCAGGCCCCATTTCTGCTAAG","CGCCCGGCCCCAGGTGGGCGGGG","CGCCCGGCCCCAGTTTTTCTAAG","CGCCCGGCGCCAGGTCTGCGAAG","CGCGAAGCCCCAGCCCTGCGCGG",
    "CGCGAGGCCCGGGGTCTGCGGAG","CGCGCAGCCCCAGTTCTCACCGG","CGCGCAGCCCCAGTTCTCGCTGG","CGCGCAGCCCGAGGACTGCGAGG","CGCGCCGCCCCAGTTGCGCGCGG",
    "CGCGCCGCCGGAGTTCCGCGGAG","CGCGCGCACCCAGTCCAGCGCGG","CGCGCGGCCCACGTGCGGCGGAG","CGCGCGGCCCCAGACCTGCTGGG","CGCGCGGCCCCAGCCCTGCCTGG",
    "CGCGCGGCCCCAGGTGCCCGCGG","CGCGCGGCCCCAGTTCTGCGCAG","CGCGCGGCCCCCGTCCGGGGCGG","CGCGCGGCCCCGGCCCTGGGCGG","CGCGCGGCCCCGGGTCTCCCGGG",
    "CGCGCGGCCCGCGCCCTGCGCGG","CGCGCGGCCCTGGGTCTCCGCGG","CGCGCGGCCCTGGTCCGGCGTGG","CGCGCGGCCGCAGTGCCGCAAGG","CGCGCGGCCGCGGGGCTGCGCGG",
    "CGCGCGGCTCCGCGTCTGCGAGG","CGCGCGGGGCCTGGTCTGCGGGG","CGCGCGTCCCCAGCTCGGCTCGG","CGCGCGTCTCCAAGTCTGCGAGG","CGCGCTGCCCCAGGTCTGGGCGG","CGCGCTGCCCCCGTCCAGCGTGG","CGCGGCGCCCCAGGTCCGCGCGG",
    "CGCGGGCACCCAGTTCTGTGAGG","CGCGGGGACCCAGGTCTGGGCGG","CGCTCAGCCCCAGTTCTTAGAGG","CGGGAGGCCCCAGCTCTGAGGGG","CGGGCAGTCCCAGATCTGCGTAG","CGGGCGGACCCAGGTGTGCGGGG","CGGGCGGCCCAGGCTCTGCGGGG",
    "CGGGCGGCCCCAGGACCGCGTGG","CGGGCGGCCGCAACTCTGCGAGG","CGGGGGGCCCCAGGGCTGCGCGG","CGTTCGGCCCAAGTTCTGCCCAG","CTCACGGCCCCAGTACTGCCCAG","CTCCCTGCCCCAGTTCTGCTAAG","CTCCCTGCCCCAGTTCTGCTCAG",
    "CTCGCAGCCCCAGCTCTGCCCAG","CTCGCGGCCCCGGCTCTGAGCAG","CTCGCGGCCCGAGTCCTGCCAAG","CTCTCAGCCCCAGTTCTGCCCAG","CTCTGGGCCCCAGTTCTGCGAGG","GACGCGGCCTCAGTCCTGCGCGG","GGCCAGGCCCCAGTTCTGGGTGG",
    "GGCCCGGCCCCAGTTCCCCGCAG","GGCGCAGCCCCAGTCCTGGGAGG","GGCGCGGCCCCAGCCCCGCGAGG","GGCGCGGCCCCAGCGCTGCGGGG","GGCGCGGCCCCAGTTTCGGGCGG","GGCGCGGCCCCTGGTCGGCGGAG","GGCGCGGCCGCAGGTCTGCGAGG",
    "GGCGCTGCCCCCGTTCTGGGCGG","GGGGCGGCCCCACTTCTGGGAGG","GGGGCGGCCCCAGTCCTCCGGGG","GGTGCGGCCCCAGTCCTGCAAGG","TGCACAGCCCCCGTTCTGCGCAG","TGCGCCGCGCCAGGTCTGCGAGG","TGGGCAGCCCCAGTCCTGCGGAG")

    val otListLong2 = offTargetList2.map{ot => bitEncoder.bitEncodeString(ot)}

    val crispr = CRISPRSite("test", "CGCGCGGCCCCAGTTCTGCGCAG", true, 0, None)
    val otHit = new CRISPRSiteOT(crispr, bitEncoder.bitEncodeString(StringCount("CGCGCGGCCCCAGTTCTGCGCAG", 1)),1000)
    otListLong2.foreach{ot => otHit.addOT(new CRISPRHit(ot,Array[Long](0l)))}

    (dScore.scoreGuide(otHit).toDouble) should be(0.30252100830756307 +- 0.001)
  }

}
